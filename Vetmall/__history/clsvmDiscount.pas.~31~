unit clsvmDiscount;
interface

uses Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
     clsCustomerGroup, clsGenHlp, clsObjModel, REST.JSON, clsCustomersCustomergroups, Datasnap.DBClient,
      clsAddress, cxCheckComboBox, cxLookandFeelPainters, clsManufacturer, clsCategory;

type


  TvmDiscounts = class(TObject)
  Private
    fid : integer;
    ffkManufacturer_id : integer;
    fcustomergroup : TCustomerGroup;
    fcategory : TCategory;
    fsubcategories : boolean;
    fdiscount_pct : double ;
    fconfig_special : boolean;
    fdiscount_start : TDateTime;
    fdiscount_stop : TDateTime;
    ffulltime : boolean;
    fstate : boolean;
    fcreated_by : integer;
    fcreated_time : TDateTime;

    function test: string;

  public
    Property id: integer read fid write fid;
    Property Manufacturer_id: integer read ffkManufacturer_id write ffkManufacturer_id;
    Property Customergroup: TCustomerGroup read fcustomergroup write fcustomergroup;
    Property Category: TCategory read fcategory write fcategory;
    property CategoryName : string read test;
    Property subcategories: boolean read fsubcategories write fsubcategories;
    Property discount_pct: double read fdiscount_pct write fdiscount_pct;
    Property config_special: boolean read fconfig_special write fconfig_special;
    Property discount_start: TDateTime read fdiscount_start write fdiscount_start;
    Property discount_stop: TDateTime read fdiscount_stop write fdiscount_stop;
    Property fulltime: boolean read ffulltime write ffulltime;
    Property state: boolean read fstate write fstate;
    Property created_by: integer read fcreated_by write fcreated_by;
    Property created_time: TDateTime read fcreated_time write fcreated_time;
 //   destructor Destroy; override;
 //   constructor Create;
  end;

  TvmDiscountsArray = Array of TvmDiscounts;

  TvmDiscountsListe = class
  Private
    fvmdiscountsliste : TvmDiscountsArray;
    pClientDataSet : TClientDataSet;
  Public

    constructor Create;
    destructor Destroy; override;
    function Load(manufacturerid : integer): TFunktionsResultat;
    property vmDiscountsliste : TvmDiscountsArray read fvmdiscountsliste write fvmdiscountsliste;
    Property ClientDataSet: TClientDataSet read pClientDataSet write pClientDataSet;
    procedure BuildClientDataSet;
//    procedure FillObj(myCategoryListe : TCategoryListe);
 //   procedure HentBeskrivelser(destStr: TStrings);
  end;




implementation
uses REST.Client, REST.Response.Adapter, REST.Types, db, Data.DBXJSON;

function TvmDiscounts.test: string;
begin
  result := self.fcategory.categorydescription.name;
end;

//// TRectangle property 'Setter' routine
//procedure TRectangle.SetCoord(Index, Value: Integer);
//begin
//  // Only allow valid index values
//  if (Index >= 0) and (Index <= 3)
//  then
//  begin
//    // Save the new value
//    fCoords[Index] := Value;
//
//    // And recreate the rectangle area
//    fArea := (right - left) * (bottom - top);
//  end;
//end;






constructor TvmDiscountsListe.Create;
begin
  inherited;
    self.pClientDataSet := TClientDataSet.Create(nil);
    self.pClientDataSet := TClientDataSet.Create(nil);
    self.pClientDataSet.FieldDefs.Add('id', ftInteger, 0, true);
    self.pClientDataSet.FieldDefs.Add('kundegrpnavn', ftString, 30, false);
    self.pClientDataSet.FieldDefs.Add('kategorynavn', ftString, 30, false);
    self.pClientDataSet.FieldDefs.Add('usesubcategories', ftBoolean, 0, false);
    self.pClientDataSet.FieldDefs.Add('starttid', ftDate, 0, false);
    self.pClientDataSet.FieldDefs.Add('sluttid', ftDate, 0, false);
    self.pClientDataSet.FieldDefs.Add('discount', ftFloat, 0, false);
    self.pClientDataSet.FieldDefs.Add('discountoncampain', ftBoolean, 0, false);
    self.pClientDataSet.CreateDataSet;
    self.pClientDataSet.Active:=true;
end;


destructor TvmDiscountsListe.Destroy;
begin
  self.pClientDataSet.Free;
  inherited;
end;


procedure TvmDiscountsListe.BuildClientDataSet;
var
  tmpvmDiscount : TvmDiscounts;
  i : integer;
begin
  if self.ClientDataSet.Active then
  begin
    if self.ClientDataSet.RecordCount>0 then
    begin
      for I := 0 to ClientDataSet.RecordCount - 1 do
      begin
        tmpvmDiscount := TvmDiscounts(self.fvmdiscountsliste[i]);
//        if (tmpvmDiscount.Customergroup <> nil) and (tmpvmDiscount.Category<> nil) then
//          self.ClientDataSet.AppendRecord([tmpvmDiscount.id,tmpvmDiscount.fcustomergroup.CustomerGroupDescription.Description,tmpvmDiscount.Category.categorydescription.name, tmpvmDiscount.subcategories, tmpvmDiscount.discount_start, tmpvmDiscount.discount_stop, tmpvmDiscount.discount_pct, tmpvmDiscount.config_special ]);
      end;
    end;
  end;

end;

function TvmDiscountsListe.Load(manufacturerid : integer): TFunktionsresultat;
var
  svc : string;
  RESTRequest1 : TRESTRequest;
  RESTResponse1 : TRESTResponse;
  RestResponse1DataSetAdapter : TRESTResponseDataSetAdapter;
  tmpvmDisountsliste : TvmDiscountsListe;
  i : integer;
  a : string;
begin
  RESTRequest1 := TRESTRequest.Create(FSModel.RESTClient1);
  RESTResponse1 := TRESTResponse.Create(FSModel.RESTClient1);

  RestResponse1DataSetAdapter := TRESTResponseDataSetAdapter.Create(FSModel.RESTClient1);
  RestResponse1DataSetAdapter.Response := RESTResponse1;
  RESTRequest1.Response := RESTResponse1;

  result:=TFunktionsResultat.Create;
  try
    tmpvmDisountsliste := TvmDiscountsListe.Create;
    svc := 'GetvmdiscountListFromManufacturerID';
    RESTRequest1.Method :=   TRESTRequestMethod.rmGET;
    RestResponse1DataSetAdapter.Dataset :=  self.pClientDataSet;
    RestResponse1DataSetAdapter.RootElement := svc+'Result.vmdiscountsListe';
    RESTRequest1.Resource := svc +'/'+IntToStr(manufacturerid);
    RESTRequest1.Execute;

    tmpvmDisountsliste := TJson.JsonToObject<TvmDiscountsListe>(TJsonHelp.TrimJsonResult(RESTResponse1.JSONValue.ToString, svc));


    for I := 0 to pClientDataSet.FieldDefs.Count-1 do
    begin
      a := self.pClientDataSet.FieldDefs.Items[i].Name;
    end;


 //   Self.FillObj(tmpvmDisountsliste);
    tmpvmDisountsliste.Free;
 //   self.BuildClientDataSet;
  except
     on e:exception do
     Begin
      result.Status:=rsFejl;
      result.Besked:=e.Message;
     End;
   End;
   RESTRequest1.Free;
   RESTResponse1.Free;
//   RestResponse1DataSetAdapter.Free;
end;






end.




