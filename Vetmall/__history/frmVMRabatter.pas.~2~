unit frmVMRabatter;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxStyles, dxSkinsCore, dxSkinBlack, dxSkinBlue,
  dxSkinBlueprint, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinDevExpressDarkStyle, dxSkinDevExpressStyle, dxSkinFoggy,
  dxSkinGlassOceans, dxSkinHighContrast, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMetropolis,
  dxSkinMetropolisDark, dxSkinMoneyTwins, dxSkinOffice2007Black,
  dxSkinOffice2007Blue, dxSkinOffice2007Green, dxSkinOffice2007Pink,
  dxSkinOffice2007Silver, dxSkinOffice2010Black, dxSkinOffice2010Blue,
  dxSkinOffice2010Silver, dxSkinOffice2013DarkGray, dxSkinOffice2013LightGray,
  dxSkinOffice2013White, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxEdit, cxNavigator, Data.DB, cxDBData, cxCalendar,
  cxDBLookupComboBox, cxGridLevel, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid;

type
  TFormVMRabatter = class(TForm)
    grDelruteResultat: TcxGrid;
    grDRResultatDBTableView: TcxGridDBTableView;
    grDRResultatDBTableViewStarttid: TcxGridDBColumn;
    grDRResultatDBTableViewSluttid: TcxGridDBColumn;
    cxGridDBDRKundeGrpId: TcxGridDBColumn;
    cxGridDBDRKategoriId: TcxGridDBColumn;
    cxGridLevel1: TcxGridLevel;
  private
    { Private declarations }

  public
    { Public declarations }
    procedure SetupAndShow;
  end;

var
  FormVMRabatter: TFormVMRabatter;

implementation

{$R *.dfm}



procedure frmVMRabatter.SetupAndShow;
var
  TmpResult : TFunktionsResultat;
begin
  self.pCategoryListe := TCategoryListe.Create;
  TmpResult := self.pCategoryListe.Load;
  if TmpResult.Status = rsOk then
  begin
    TmpResult.Free;
    self.pCategoryListe.HentBeskrivelser(self.cbCategoryGroup.Properties.Items);
    self.cbCategoryGroup.ItemIndex := 0; //select Alle
  end;

  UpdateCtrl;
  self.ShowModal;
  if self.pProductListe <> nil then
    self.pProductListe.Free;
end;






end.
